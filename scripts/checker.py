import numpy as np
import timing
import general as g
from matplotlib import pyplot as plt
from NM import diagnostics as d
from scipy.interpolate import interp1d
from scipy.optimize import minimize, Bounds
import ssp_helpers as sh
import pickle


if __name__ == '__main__':
    f = np.linspace(50, 1000, 8)
    zs,rs = 40,500
    source_params = g.SourceParams(f, rs, zs)

    zr = [40]

    # MEDIUM INFO
    rho1, rho2 = 1000, 1500
    D = 100
    rhof = lambda z: np.piecewise(z, [z<=D, z>D], [rho1, rho2])
    cb = 1600
    cbpert = 1600  # no change
    ssp = np.array([1500, 1490, 1485, 1480, 1479, 1478, 1480, 1481, 1482, 1483, 1485, 1486, 1489, 1492, 1492, 1499, 1503, 1503, 1503, 1504])
    mean_sspf = sh.get_sspf(ssp, D, cb)
    mean_cwsspf = sh.get_water_sspf(ssp, D)
    mean_medium = g.Medium([D], rhof, cb,  mean_sspf)


    # DOMAIN LIMITS ARE AUTOGENERATED FROM THE MEDIUM AND SOURCE PARAMS
    dz, dr = .10, .10
    

    # PERTURBATION
    mean_depth, var, amp = 40,23, 100
    num_profs = 100
    gparams = g.GaussPertParams(mean_depth, var, amp, num_profs)


    dc = .1

    dom = g.Domain(0, 1.5*D, dz, dr, rs, dr)
    print(f)
    
    diag = input("Calc derivs?")
    if diag == 'y':
        print('Calculating derivs')
        rms_derivs, kern1, kern2 = d.deriv_test(source_params, zr, mean_medium, cbpert, dom, gparams, dc)
        with open("derivskern.pickle", 'wb') as curr_file:
            pickle.dump([rms_derivs, kern1, kern2], curr_file)
            print("pickled those derivs")
    else:
        with open("derivskern.pickle", 'rb') as curr_file:
            thing = pickle.load(curr_file)
            rms_derivs = thing[0]
            kern1, kern2 = thing[1], thing[2]
            plt.plot(dom.z, abs(kern1.transpose()))
            print(rms_derivs)
            plt.show()
            plt.scatter(f, rms_derivs)
            plt.ylim(np.min(rms_derivs), 1.1*np.max(rms_derivs))
            plt.xlabel("Frequency (Hz)")
            plt.ylabel("RMS value of derivative")
            plt.title("Linearity vs Source Frequency for source at range 500 meters")
            plt.show()
